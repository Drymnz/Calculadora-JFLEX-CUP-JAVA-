package com.example.mycalculator.JflexYCup.Code;

import java_cup.runtime.*;

import com.example.mycalculator.JflexYCup.Token;
import com.example.mycalculator.JflexYCup.reportError.ListMathOperation;
import com.example.mycalculator.JflexYCup.reportError.MathOperation;
import com.example.mycalculator.JflexYCup.reportError.ReportErrorInterpreter;
import com.example.mycalculator.JflexYCup.reportError.TypeIntreprete;

import java.util.ArrayList;

/**
     * ***STAR CODE*******
     */
    parser code {:

private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<MathOperation> listMathOperation = new ArrayList();
private final String ERROR_OPERATION = "Error en la operacion";
private String RESULT_FINAL = "0";


	public parser(Lexema lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        String lexema = this.cur_token.value.toString();
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        //System.err.println("Numero del teminal->"+this.cur_token.sym);
        ///codigo para el objeto
        TypeIntreprete type = TypeIntreprete.SYNTACTIC;
        this.listError.add(new ReportErrorInterpreter(type, new Token(line, columna, lexema), ERROR_OPERATION));
    }

    // returnar el token actual
    private Token getTokePresent(){
        return new Token((cur_token.left+1), (cur_token.right+1), sym.terminalNames[cur_token.sym]);
    }

    //modificacion de sym.terminalNames[cur_token.sym]
    private void setTextToken(String modification){
        sym.terminalNames[cur_token.sym] = modification;
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    //Returnar el listado de errores
    public ArrayList<MathOperation> getListMathOperation() {
        return this.listMathOperation;
    }

    // converitir el string en un int
    private int stringToIntCrew(String tx){
        double numero = Double.parseDouble(tx);
        int resultado2 = (int) Math.round(numero);
        return resultado2;
    }
    public String getResultFinal(){
        return this.RESULT_FINAL;
    }

        //agregar reprote de mathoperation
        private void addReportMathOperation(ListMathOperation type){
            this.listMathOperation.add(new MathOperation(this.getTokePresent(), type));
        }
    /**
     * ***END CODE*******
     */
:}

/* Terminales */
/*SIMBOLOS DE OPERACION*/
terminal SUMAR,RESTAR,DIVIDIR,MULTIPLICAR,PARENTESIS_A,PARENTESIS_C;
terminal String REAL_NUMEBERS;

/* No terminales */

non terminal inico_opereacion,operacion,parente;
non terminal inicio;

/* Precedencias */
precedence left SUMAR, RESTAR;
precedence left MULTIPLICAR, DIVIDIR;
precedence left PARENTESIS_A, PARENTESIS_C;

/* GramÃ¡tica */
start with inicio;
/******operaciones matematicas*****/
inicio ::= inico_opereacion
    | error inico_opereacion
    ;

inico_opereacion ::= operacion:a
    {:
    //////////////////////////////////////////
		Double aDouble = 0.0;
    if (a!=null) {
      aDouble =   Double.valueOf(a.toString());
      RESULT_FINAL = aDouble.toString();
       RESULT = aDouble;
    }else{
      RESULT = aDouble;
    }
    //////////////////////////////////////////
    :}
    ;
/******operaciones matematicas*****/
operacion
/**SUMA**/
::= operacion:a SUMAR operacion:b
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      setTextToken(a +" + "+ b);
      Double resultDouble = aDouble + bDouble;
      addReportMathOperation(ListMathOperation.ADDITION);
      RESULT = resultDouble;
    }else{
      //System.out.println(getTokePresent().toString());
      RESULT = aDouble;
    }
    /////////////////////////////////////////////
    :}

/**RESTA**/
|  operacion:a RESTAR operacion:b
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      setTextToken(a +" - "+ b);
      Double resultDouble = aDouble - bDouble;
      addReportMathOperation(ListMathOperation.SUBTRACTION);
      RESULT = resultDouble;
    }else{
      //System.out.println(getTokePresent().toString());
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    :}
/**DIVISION**/
|  operacion:a DIVIDIR operacion:b
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      if (bDouble>0) {
        setTextToken(a +" / "+ b);
        Double result = ( bDouble/ bDouble);
        addReportMathOperation(ListMathOperation.DIVISION);
        RESULT = result;
      }else{
        /// manejar un error de sintasis
        RESULT = aDouble;// si es 15/0
      }
    }else{
      //System.out.println(getTokePresent().toString());
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    :}

/**MULTIPLICACION**/
|  operacion:a MULTIPLICAR operacion:b
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      setTextToken(a +" * "+ b);
      Double result = aDouble * bDouble;
      addReportMathOperation(ListMathOperation.MULTIPLICATION);
      RESULT = result;
    }else{
      //System.out.println(getTokePresent().toString());
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    :}
/****solo retornar*****/
| PARENTESIS_A operacion:a  parente:b
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      setTextToken(a +" ) "+ b);
      Double result = aDouble * bDouble;
       addReportMathOperation(ListMathOperation.MULTIPLICATION);
      RESULT = result;
    }else{
      //System.out.println(getTokePresent().toString());
      RESULT = a;
    }
    /////////////////////////////////////////////
    :}

| REAL_NUMEBERS:a PARENTESIS_A  operacion:b  PARENTESIS_C
    {:
    /////////////////////////////////////////////
    Double aDouble = 0.0;
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      setTextToken(a +" ( "+ b);
      Double result = aDouble * bDouble;
      addReportMathOperation(ListMathOperation.MULTIPLICATION);
      RESULT = result;
    }else{
      //System.out.println(getTokePresent().toString());
      RESULT = a;
    }
    /////////////////////////////////////////////
    :}
/***manejar el error***/
| error
| REAL_NUMEBERS:a {:RESULT = a;:}
;

parente
  ::= PARENTESIS_C
  | PARENTESIS_C operacion:a {:RESULT = a;:}
  | error
  ;