
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.mycalculator.JflexYCup.Code;

import java_cup.runtime.*;
import com.example.mycalculator.JflexYCup.Token;
import com.example.mycalculator.JflexYCup.reportError.ListMathOperation;
import com.example.mycalculator.JflexYCup.reportError.MathOperation;
import com.example.mycalculator.JflexYCup.reportError.ReportErrorInterpreter;
import com.example.mycalculator.JflexYCup.reportError.TypeIntreprete;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\005\003\000\002\005" +
    "\004\000\002\002\003\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\006\000\002\003\003\000\002\003\003\000\002" +
    "\004\003\000\002\004\004\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\010\003\005\010\006\012\007\001\002\000" +
    "\004\002\000\001\002\000\022\002\ufff7\003\017\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\010\006\012\007\001\002\000" +
    "\010\003\017\010\006\012\007\001\002\000\022\002\ufff6" +
    "\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\024\011" +
    "\ufff6\001\002\000\014\002\ufffe\004\015\005\016\006\013" +
    "\007\014\001\002\000\004\002\012\001\002\000\004\002" +
    "\001\001\002\000\010\003\017\010\006\012\007\001\002" +
    "\000\010\003\017\010\006\012\007\001\002\000\010\003" +
    "\017\010\006\012\007\001\002\000\010\003\017\010\006" +
    "\012\007\001\002\000\020\002\ufff7\003\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\011\ufff7\001\002\000\020\002\ufffc" +
    "\003\ufffc\004\ufffc\005\ufffc\006\013\007\014\011\ufffc\001" +
    "\002\000\020\002\ufffd\003\ufffd\004\ufffd\005\ufffd\006\013" +
    "\007\014\011\ufffd\001\002\000\020\002\ufffa\003\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\001\002\000\020" +
    "\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\011" +
    "\ufffb\001\002\000\010\003\017\010\006\012\007\001\002" +
    "\000\014\004\015\005\016\006\013\007\014\011\026\001" +
    "\002\000\020\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\011\ufff8\001\002\000\016\003\030\004\015\005" +
    "\016\006\013\007\014\011\031\001\002\000\020\002\ufff3" +
    "\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\001" +
    "\002\000\024\002\ufff5\003\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\006\011\ufff5\012\007\001\002\000\020\002" +
    "\ufff9\003\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9" +
    "\001\002\000\020\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\011\ufff4\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\010\002\003\003\007\005\010\001\001\000" +
    "\002\001\001\000\006\002\033\003\007\001\001\000\004" +
    "\003\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\022\001\001" +
    "\000\004\003\021\001\001\000\004\003\020\001\001\000" +
    "\004\003\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\031\001\001\000\002\001\001\000\004\003" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private ArrayList<ReportErrorInterpreter> listError = new ArrayList();
private ArrayList<MathOperation> listMathOperation = new ArrayList();
private final String ERROR_OPERATION = "Error en la operacion";
private String RESULT_FINAL = "0";


	public parser(Lexema lexer) {
        super(lexer);
    }

    //erorr
    public void syntax_error(Symbol cur_token) {
        String nameTerminal = symbl_name_from_id(this.cur_token.sym);
        int numberTerminal = this.cur_token.sym;
        String lexema = this.cur_token.value.toString();
        int line = cur_token.left+1;
        int columna = cur_token.right +1;
        //System.err.println("Numero del teminal->"+this.cur_token.sym);
        ///codigo para el objeto
        TypeIntreprete type = TypeIntreprete.SYNTACTIC;
        this.listError.add(new ReportErrorInterpreter(type, new Token(line, columna, lexema), ERROR_OPERATION));
    }

    // returnar el token actual
    private Token getTokePresent(){
        return new Token((cur_token.left+1), (cur_token.right+1), sym.terminalNames[cur_token.sym]);
    }

    //modificacion de sym.terminalNames[cur_token.sym]
    private void setTextToken(String modification){
        sym.terminalNames[cur_token.sym] = modification;
    }

    //Returnar el listado de errores
    public ArrayList<ReportErrorInterpreter> getListError() {
        return this.listError;
    }

    //Returnar el listado de errores
    public ArrayList<MathOperation> getListMathOperation() {
        return this.listMathOperation;
    }

    // converitir el string en un int
    private int stringToIntCrew(String tx){
        double numero = Double.parseDouble(tx);
        int resultado2 = (int) Math.round(numero);
        return resultado2;
    }
    public String getResultFinal(){
        return this.RESULT_FINAL;
    }

        //agregar reprote de mathoperation
        private void addReportMathOperation(ListMathOperation type){
            this.listMathOperation.add(new MathOperation(this.getTokePresent(), type));
        }
    /**
     * ***END CODE*******
     */


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= inico_opereacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= error inico_opereacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inico_opereacion ::= operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //////////////////////////////////////////
		Double aDouble = 0.0;
    if (a!=null) {
      aDouble =   Double.valueOf(a.toString());
      RESULT_FINAL = aDouble.toString();
       RESULT = aDouble;
    }else{
      RESULT = aDouble;
    }
    //////////////////////////////////////////
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inico_opereacion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // operacion ::= operacion SUMAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      setTextToken(a +" + "+ b);
      Double resultDouble = aDouble + bDouble;
      addReportMathOperation(ListMathOperation.ADDITION);
      RESULT = resultDouble;
    }else{
      //System.out.println(getTokePresent().toString());
      RESULT = aDouble;
    }
    /////////////////////////////////////////////
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // operacion ::= operacion RESTAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      setTextToken(a +" - "+ b);
      Double resultDouble = aDouble - bDouble;
      addReportMathOperation(ListMathOperation.SUBTRACTION);
      RESULT = resultDouble;
    }else{
      //System.out.println(getTokePresent().toString());
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operacion ::= operacion DIVIDIR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      if (bDouble>0) {
        setTextToken(a +" / "+ b);
        Double result = ( bDouble/ bDouble);
        addReportMathOperation(ListMathOperation.DIVISION);
        RESULT = result;
      }else{
        /// manejar un error de sintasis
        RESULT = aDouble;// si es 15/0
      }
    }else{
      //System.out.println(getTokePresent().toString());
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operacion ::= operacion MULTIPLICAR operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      setTextToken(a +" * "+ b);
      Double result = aDouble * bDouble;
      addReportMathOperation(ListMathOperation.MULTIPLICATION);
      RESULT = result;
    }else{
      //System.out.println(getTokePresent().toString());
      RESULT = aDouble;
    }
    /////////////////////////////////////////////

    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operacion ::= PARENTESIS_A operacion parente 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      setTextToken(a +" ) "+ b);
      Double result = aDouble * bDouble;
       addReportMathOperation(ListMathOperation.MULTIPLICATION);
      RESULT = result;
    }else{
      //System.out.println(getTokePresent().toString());
      RESULT = a;
    }
    /////////////////////////////////////////////
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operacion ::= REAL_NUMEBERS PARENTESIS_A operacion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    /////////////////////////////////////////////
    Double aDouble = 0.0;
    Double bDouble = 0.0;
    if(a != null){
      aDouble =   Double.valueOf(a.toString());
    }
    if (b!=null) {
      bDouble =   Double.valueOf(b.toString());
    }
    if (b!=null & a != null ) {
      setTextToken(a +" ( "+ b);
      Double result = aDouble * bDouble;
      addReportMathOperation(ListMathOperation.MULTIPLICATION);
      RESULT = result;
    }else{
      //System.out.println(getTokePresent().toString());
      RESULT = a;
    }
    /////////////////////////////////////////////
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operacion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operacion ::= REAL_NUMEBERS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parente ::= PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parente",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parente ::= PARENTESIS_C operacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parente",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parente ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parente",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
